The BPMN JSON representation uses a sequence of elements to describe the process. Each element is executed in order based on its position in the "process" array unless gateways (exclusive or parallel) specify branching paths.

# Representation of various BPMN elements

## Tasks

Specify the task type in the 'type' field. Only "task", "userTask" and "serviceTask" options are supported.
Always try to specify the specific task type (e.g. 'userTask', 'serviceTask') instead of just 'task' if the task is performed by a user or an automated system.

```json
{
    "type": String = "task" | "userTask" | "serviceTask"
    "id": String,
    "label": String, // short task description
}
```

## Events

Specify the event type in the 'type' field. Only "startEvent" and "endEvent" options are supported.

```json
{
    "type": String = "startEvent" | "endEvent",
    "id": String,
}
```

## Gateways

Gateways determine process flow based on conditions or parallel tasks.

### Exclusive gateway

Each branch must include a condition and an array of elements that are executed if the condition is met.
If a branch has an empty "path", it leads to the first element after the exclusive gateway.
If the branch does not lead to the next element in the process (for example, it goes back to a previous element), specify the next element id.
If the branch leads to the next element in the process, do not specify the next element id.
If the process needs to end under a specific condition, you must explicitly include an end event in that branch's "path". If no end event is provided, the process will automatically continue to the next task in the sequence.
If the process description does not explicitly mention the 'else' branch or specify the outcome for an unmet condition, assume it leads to an end event.


```json
{
    "type": String = "exclusiveGateway",
    "id": String,
    "label": String, // label for the gateway (e.g. "Professor agrees?")
    "has_join": Boolean, // whether the gateway contains a join element that merges the branches
    "branches": [
        {
            "condition": String, // condition for the branch
            "path": [], // array of elements that are executed if the condition is met (can be empty)
            "next": String, // OPTIONAL: ID of the next element if not following default sequence. Omit or set to null if following default sequence.
        },
        {
            "condition": String,
            "path": [],
            "next": String, // OPTIONAL: as above
        },
        // ... more branches
    ],
}
```

### Parallel gateway

Specify "branches" as an array of arrays, where each sub-array lists elements executed in parallel.
A converging element is automatically generated to synchronize parallel branches. Therefore, there's no need to explicitly specify it.

```json
{
    "type": String = "parallelGateway",
    "id": String,
    "branches": [
        [], // array of elements that are executed in parallel with the next array
        [], // array of elements that are executed in parallel with the previous array
        // ... more arrays
    ],
}
```

# Process examples

The order of execution in the BPMN process is determined by the sequence of elements in the top-level "process" array. Elements are executed in the order they appear in this array, from first to last.

Textual description:
"The student sends an email to the professor. The professor receives the email. If the professor agrees with the proposal, he replies to the student."

```json
{
    "process": [
        {
            "type": "startEvent",
            "id": "start",
        },
        {
            "type": "userTask",
            "id": "task1",
            "label": "Send email to professor",
        },
        {
            "type": "task",
            "id": "task2",
            "label": "Receive the email",
        },
        {
            "type": "exclusiveGateway",
            "id": "exclusive1",
            "label": "Professor agrees?",
            "has_join": true,
            "branches": [
                {
                    "condition": "If the professor agrees",
                    "path": [
                        {
                            "type": "task",
                            "id": "task3",
                            "label": "Reply to the student",
                        }
                    ]
                },
                {
                    "condition": "If the professor does not agree",
                    "path": []
                }
            ]
        },
        {
            "type": "endEvent",
            "id": "end1",
        }
    ]
}
```

---

Textual description:
"The manager sends the mail to the supplier and prepares the documents. At the same time, the customer searches for the goods and picks up the goods."

```json
{
    "process": [
        {
            "type": "startEvent",
            "id": "start",
        },
        {
            "type": "parallelGateway",
            "id": "parallel1",
            "branches": [
                [
                    {
                        "type": "serviceTask",
                        "id": "task1",
                        "label": "Send mail to supplier",
                    },
                    {
                        "type": "task",
                        "id": "task2",
                        "label": "Prepare the documents",
                    }
                ],
                [
                    {
                        "type": "task",
                        "id": "task3",
                        "label": "Search for the goods",
                    },
                    {
                        "type": "task",
                        "id": "task4",
                        "label": "Pick up the goods",
                    }
                ]
            ]
        },
        {
            "type": "endEvent",
            "id": "end1",
        }
    ]
}
```

---

Textual description: "Someone starts a process by entering an exam room. After that, they take the test. Once the exam is finished, their score is checked. If they scored more than 50%, their grade is recorded and the process ends. But if they fail, they have to go back to the beginning and take the exam again."

```json
{
    "process": [
      {
        "type": "startEvent",
        "id": "start"
      },
      {
        "type": "task",
        "id": "task1",
        "label": "Enter exam room"
      },
      {
        "type": "task",
        "id": "task2",
        "label": "Take test"
      },
      {
        "type": "exclusiveGateway",
        "id": "eg",
        "label": "Score more than 50%?",
        "has_join": false,
        "branches": [
          {
            "condition": "Yes",
            "path": [
              {
                "type": "task",
                "id": "task3",
                "label": "Enter grade"
              },
              {
                "type": "endEvent",
                "id": "end1"
              }
            ]
          },
          {
            "condition": "No",
            "path": [],
            "next": "task1"
          }
        ]
      }
    ]
}
```

---

Textual description: "The process starts with a decision. If Option A is selected, Task A is performed. If Option B is selected, Task B is performed. Task A is followed by another decision. If Sub-option 1 is selected, Task A1 is performed. If Sub-option 2 is selected, Task A2 is performed."


```json
{
  "process": [
    {
      "type": "startEvent",
      "id": "start",
    },
    {
      "type": "exclusiveGateway",
      "id": "gateway1",
      "label": "Main Decision",
      "has_join": false,
      "branches": [
        {
          "condition": "Option A",
          "path": [
            {
              "type": "task",
              "id": "taskA",
              "label": "Perform Task A",
            },
            {
              "type": "exclusiveGateway",
              "id": "gateway2",
              "label": "Nested Decision",
              "has_join": false,
              "branches": [
                {
                  "condition": "Sub-option 1",
                  "path": [
                    {
                      "type": "task",
                      "id": "taskA1",
                      "label": "Perform Task A1",
                    }
                  ],
                },
                {
                  "condition": "Sub-option 2",
                  "path": [
                    {
                      "type": "task",
                      "id": "taskA2",
                      "label": "Perform Task A2",
                    }
                  ],
                }
              ]
            }
          ],
        },
        {
          "condition": "Option B",
          "path": [
            {
              "type": "task",
              "id": "taskB",
              "label": "Perform Task B",
            }
          ],
        }
      ]
    },
    {
      "type": "endEvent",
      "id": "end",
    }
  ]
}
```

---

The following is the message history between the user and an AI assistant.

Message history:
```
::message_history
```

Create a BPMN representation of the process described in the messages.