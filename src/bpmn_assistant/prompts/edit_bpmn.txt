# Representation of various BPMN elements

## Tasks

Specify the task type in the 'type' field. Only "task", "userTask" and "serviceTask" options are supported.

```json
{
    "type": String = "task" | "userTask" | "serviceTask"
    "id": String,
    "label": String, // short task description
}
```

## Events

Specify the event type in the 'type' field. Only "startEvent" and "endEvent" options are supported.

```json
{
    "type": String = "startEvent" | "endEvent",
    "id": String,
}
```

## Gateways

### Exclusive gateway

Each branch has a condition and a path of elements that are executed if the condition is met.
If the branch does not lead to the next element in the process (for example, it goes back to a previous element), specify the next element id.
If the branch leads to the next element in the process, do not specify the next element id.

```json
{
    "type": String = "exclusiveGateway",
    "id": String,
    "label": String, // label for the gateway (e.g. "Professor agrees?")
    "has_join": Boolean, // whether the gateway contains a join element that merges the branches
    "branches": [
        {
            "condition": String, // condition for the branch
            "path": [], // array of elements that are executed if the condition is met (can be empty)
            "next": String, // OPTIONAL: if the branch does not lead to the next element in the process, specify the next element id
        },
        {
            "condition": String,
            "path": [],
            "next": String, // OPTIONAL
        },
        // ... more branches
    ],
}
```

### Parallel gateway

```json
{
    "type": String = "parallelGateway",
    "id": String,
    "branches": [
        [], // array of elements that are executed in parallel with the next array
        [], // array of elements that are executed in parallel with the previous array
        // ... more arrays
    ],
}
```

---

# Process editing functions

- `delete_element(element_id)`
- `redirect_branch(branch_condition, next_id)`
- `add_element(element, before_id=None, after_id=None)`
- `move_element(element_id, before_id=None, after_id=None)`
- `update_element(new_element)`

1. `delete_element` - Deletes an element from the process.

**Parameters:**
- `element_id`: The id of an existing element in the process

2. `redirect_branch` - Redirects the flow of a branch in an exclusive gateway.

**Parameters:**
- `branch_condition`: The condition of the branch to be redirected (needs to match the condition in the process)
- `next_id`: The id of the next element to which the flow should be redirected

3. `add_element` - Adds a new element to the process.

**Parameters:**
- `element`: An object representing a new element to be added to the process
- `before_id`: (Optional) The id of the element before which the new element should be added
- `after_id`: (Optional) The id of the element after which the new element should be added

**Note:** Only one of `before_id` or `after_id` should be provided.

4. `move_element` - Moves an existing element to a new position in the process.

**Parameters:**
- `element_id`: The id of an existing element in the process
- `before_id`: (Optional) The id of the element before which the element should be moved
- `after_id`: (Optional) The id of the element after which the element should be moved

**Note:** Only one of `before_id` or `after_id` should be provided.

5. `update_element` - Updates an existing element in the process.

**Parameters:**
- `new_element`: An object representing the updated element

**Note:** The `new_element`'s id should match the id of the element to be updated.

---

# Example function calls

```json
{
  "function": "update_element",
    "arguments": {
        "new_element": {
            "type": "task",
            "id": "task1", // the id of the element to be updated
            "label": "New task description"
        }
    }
}
```

```json
{
  "function": "add_element",
  "arguments": {
    "element": {
          "type": "task",
          "id": "newTaskId",
          "label": "New task description"
    },
    "before_id": "task1"
  }
}
```

```json
{
  "function": "delete_element",
  "arguments": {
    "element_id": "exclusive2"
  }
}
```

```json
{
  "function": "redirect_branch",
  "arguments": {
    "branch_condition": "Product is out of stock",
    "next_id": "task3"
  }
}
```

---

# Your task

The JSON representation of the process

```json
::process
```

The requested change to the process: "::change_request"

Provide one function at a time to update the process, along with the arguments for the function call.

Start with the first function call.